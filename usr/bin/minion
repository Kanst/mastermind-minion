#!/usr/bin/env python
import traceback

from opster import command
import tornado.ioloop

from minion.app import app
from minion.config import config
import minion.db.commands  # prevents dependency cycle with manager
from minion import daemon
from minion.subprocess.manager import manager
from minion import handlers
from minion.logger import logger


@command(usage='[--daemonize] [--pidfile PIDFILE]')
def main(daemonize=('', False, 'Daemonize this process'),
         pidfile=('', None, 'Use this pidfile')):
    """This script starts mastermind minion daemon
       for remote task execution and instance stats retrieval"""
    if daemonize:
        logger.debug('Daemon initialization')
        try:
            d = daemon.Daemon(pidfile or config['common']['pidfile'])
            d.run = run
            logger.debug('Starting daemon')
            d.start()
        except Exception as e:
            logger.error('Failed to start daemon: {0}'.format(e))
            logger.error(traceback.format_exc())
            return 1
    else:
        run()


def run():
    logger.info('Starting event loop...')
    app.listen(int(config['common']['port']))
    manager.update_broken_commands()
    tornado.ioloop.IOLoop.instance().start()


if __name__ == '__main__':
    main.command()
